AWSTemplateFormatVersion: '2010-09-09'
Description: Description

Parameters:
  InstanceType:
    Type: String
    Default: t3a.small

  TemplatesBucket:
    Description: Specify ON-AWS S3 Bucket
    Type: String
    Default: on-aws-us-east-1-master

  S3Uri:
    Description: Specify Fitnesse/PowerSlim location
    Type: String
    Default: s3://stackset-bootstrap-4e82861e-b7c5-49bb-8e4d-bucket-fz9yclvd5kpw/PowerSlim/

  HostedZoneId:
    Description: AWS Route53 HostedZone Id
    Type: String

  AzureTenantId:
    Type: String

  ClientId:
    Type: String

  ClientSecret:
    Type: String
    NoEcho: true

  App:
    Type: String
    Default: fitnesse

  Owner:
    Type: String

Resources:
  # ####################
  # CFN CUSTOM RESOURCES
  # ####################
  ROUTE53:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplatesBucket}/custom/route53/template.yaml
      Parameters:
        Tag: !Ref App

  GetHostedZone:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ROUTE53.Outputs.ServiceToken
      Id: !Ref HostedZoneId

  # ####################
  # Shared resources
  # ####################
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplatesBucket}/vpc/template.yaml
      Parameters:
        App: !Ref App
        Owner: !Ref Owner
        AvailabilityZonesCount: 2

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess        # required
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # required
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess       # (optional) if you want to use read only EC2 API in your tests
      Policies:                                                 # (optional) if you want to use SSM automation in your tests
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:ListCommands
                  - ssm:SendCommand
                  - ssm:StartAutomationExecution
                  - ssm:GetAutomationExecution
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for Fitnesse instance
      VpcId:  !GetAtt VPC.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Fitnesse
          SourceSecurityGroupId: !Ref LoadbalancerSecurityGroup
      Tags:
        - Key: App
          Value: fitnesse

  ################################################################################
  # Fitnesse farm
  ################################################################################
  Fitnesse1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplatesBucket}/fitnesse/template.yaml
      Parameters:
        InstanceType: !Ref InstanceType
        SecurityGroup: !Ref SecurityGroup
        InstanceProfile: !GetAtt InstanceProfile.Arn
        VPC: !GetAtt VPC.Outputs.VPC
        PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
        S3Uri: !Ref S3Uri
        App: !Ref App
        Owner: !Ref Owner

  ################################################################################
  # AWS Load Balancer
  ################################################################################
  LoadbalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for Load balancer
      VpcId: !GetAtt VPC.Outputs.VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Fitnesse
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: IdP token endpoint or the IdP user info endpoint
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: fitnesse

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Subnets:
        Fn::Split:
          - ','
          - !GetAtt VPC.Outputs.PublicSubnets
      SecurityGroups:
        - !Ref LoadbalancerSecurityGroup
      Tags:
        - Key: App
          Value: fitnesse

  DnsRecordAPI:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:
        Fn::Sub:
          - fitnesse.${Name}
          -
            Name: !GetAtt GetHostedZone.Name
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  SslCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub:
          - 'fitnesse.${Name}'
          -
            Name: !GetAtt GetHostedZone.Name
      SubjectAlternativeNames:
        - Fn::Sub:
          - '*.fitnesse.${Name}'
          -
            Name: !GetAtt GetHostedZone.Name
      ValidationMethod: DNS
      Tags:
        - Key: App
          Value: fitnesse

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        -  CertificateArn: !Ref SslCert
      DefaultActions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Sub https://login.microsoftonline.com/${AzureTenantId}/v2.0
            AuthorizationEndpoint: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/authorize
            TokenEndpoint: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/token
            UserInfoEndpoint: https://graph.microsoft.com/oidc/userinfo
            ClientId: !Ref ClientId
            ClientSecret: !Ref ClientSecret
            SessionTimeout: 86400
        - Type: forward
          Order: 2
          TargetGroupArn: !GetAtt Fitnesse1.Outputs.HttpTargetGroup
