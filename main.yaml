AWSTemplateFormatVersion: '2010-09-09'
Description: Description

Parameters:
  ImageId:
    Description: Amazon Linux 2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs

  InstanceType:
    Type: String
    Default: t3a.small

  TemplatesBucket:
    Description: Specify ON-AWS S3 Bucket
    Type: String
    Default: on-aws-us-east-1-master

  S3Uri:
    Description: Specify Fitnesse/PowerSlim location
    Type: String
    Default: s3://stackset-bootstrap-4e82861e-b7c5-49bb-8e4d-bucket-fz9yclvd5kpw/PowerSlim/

  HostedZoneId:
    Description: AWS Route53 HostedZone Id
    Type: String

  AzureTenantId:
    Type: String

  ClientId:
    Type: String

  ClientSecret:
    Type: String
    NoEcho: true

  App:
    Type: String
    Default: fitnesse

  Owner:
    Type: String

Resources:
  # ####################
  # CFN CUSTOM RESOURCES
  # ####################
  ROUTE53:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplatesBucket}/custom/route53/template.yaml
      Parameters:
        Tag: !Ref App

  GetHostedZone:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ROUTE53.Outputs.ServiceToken
      Id: !Ref HostedZoneId

  # ####################
  # Resources
  # ####################
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplatesBucket}/vpc/template.yaml
      Parameters:
        App: !Ref App
        Owner: !Ref Owner
        AvailabilityZonesCount: 2

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: FITNESSE
            - Key: App
              Value: !Ref App
            - Key: Owner
              Value: !Ref Owner
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: 0.2
            SpotInstanceType: persistent
            InstanceInterruptionBehavior: stop
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
          - ResourceType: spot-instances-request
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            rpm:
              powershell: https://github.com/PowerShell/PowerShell/releases/download/v7.1.3/powershell-7.1.3-1.rhel.7.x86_64.rpm
            yum:
              java-11-amazon-corretto-headless: []
          files:
            /etc/systemd/system/fitnesse.service:
              content: |
                [Unit]
                Description=Fitnesse as a Service
                [Service]
                User=ec2-user
                WorkingDirectory=/home/ec2-user/fitnesse
                ExecStart=/bin/java -jar fitnesse-standalone.jar -p 8080
                SuccessExitStatus=143
                TimeoutStopSec=10
                Restart=on-failure
                RestartSec=5
                [Install]
                WantedBy=multi-user.target
          commands:
            01_download_fitnesse:
              command: !Sub |
                sudo -u ec2-user aws s3 sync ${S3Uri} /home/ec2-user/fitnesse
            02_start_fitnesse:
              command: |
                systemctl daemon-reload
                systemctl enable fitnesse.service
                systemctl start fitnesse.service

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for Fitnesse instance
      VpcId:  !GetAtt VPC.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Fitnesse
          SourceSecurityGroupId: !Ref LoadbalancerSecurityGroup
      Tags:
        - Key: App
          Value: fitnesse

  Fitnesse:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - !GetAtt VPC.Outputs.PrivateSubnets
      SecurityGroupIds:
        - !Ref SecurityGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Fitnesse
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600

  ################################################################################
  # AWS Load Balancer
  ################################################################################
  LoadbalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for Load balancer
      VpcId: !GetAtt VPC.Outputs.VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Fitnesse
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: IdP token endpoint or the IdP user info endpoint
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: fitnesse

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Subnets:
        Fn::Split:
          - ','
          - !GetAtt VPC.Outputs.PublicSubnets
      SecurityGroups:
        - !Ref LoadbalancerSecurityGroup
      Tags:
        - Key: App
          Value: fitnesse

  DnsRecordAPI:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:
        Fn::Sub:
          - fitnesse.${Name}
          -
            Name: !GetAtt GetHostedZone.Name
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  SslCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub:
          - fitnesse.${Name}
          -
            Name: !GetAtt GetHostedZone.Name
      ValidationMethod: DNS
      Tags:
        - Key: App
          Value: fitnesse

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !GetAtt VPC.Outputs.VPC
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref Fitnesse
          Port: 8080
      Matcher:
        HttpCode: 200
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        -  CertificateArn: !Ref SslCert
      DefaultActions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Sub https://login.microsoftonline.com/${AzureTenantId}/v2.0
            AuthorizationEndpoint: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/authorize
            TokenEndpoint: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/token
            UserInfoEndpoint: https://graph.microsoft.com/oidc/userinfo
            ClientId: !Ref ClientId
            ClientSecret: !Ref ClientSecret
            SessionTimeout: 86400
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref HttpTargetGroup
