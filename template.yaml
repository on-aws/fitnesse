AWSTemplateFormatVersion: '2010-09-09'
Description: Description

Parameters:
  ImageId:
    Description: Amazon Linux 2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs

  InstanceType:
    Type: String
    Default: t3a.medium

  S3Uri:
    Description: Specify Fitnesse/PowerSlim location
    Type: String

  App:
    Type: String
    Default: fitnesse

  Owner:
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  SSMAutomation:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true

Conditions:
  EnableSSMAutomation:
    Fn::Equals: [ !Ref SSMAutomation, "true" ]

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Policies:
        - Fn::If:
          - EnableSSMAutomation
          - PolicyName: !Ref AWS::StackName
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:ListCommands
                    - ssm:SendCommand
                    - ssm:StartAutomationExecution
                    - ssm:GetAutomationExecution
                    - ssm:GetParameter
                    - ssm:GetParameters
                    - ssm:GetParametersByPath
                  Resource: '*'
          - !Ref AWS::NoValue

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: FITNESSE
            - Key: App
              Value: !Ref App
            - Key: Owner
              Value: !Ref Owner
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: 0.2
            SpotInstanceType: persistent
            InstanceInterruptionBehavior: stop
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
          - ResourceType: spot-instances-request
            Tags:
              - Key: Name
                Value: FITNESSE
              - Key: App
                Value: !Ref App
              - Key: Owner
                Value: !Ref Owner
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            rpm:
              powershell: https://github.com/PowerShell/PowerShell/releases/download/v7.1.3/powershell-7.1.3-1.rhel.7.x86_64.rpm
            yum:
              java-11-amazon-corretto-headless: []
          files:
            /etc/systemd/system/fitnesse.service:
              content: |
                [Unit]
                Description=Fitnesse as a Service
                [Service]
                User=ec2-user
                WorkingDirectory=/home/ec2-user/fitnesse
                ExecStart=/bin/java -jar fitnesse-standalone.jar -p 8080
                SuccessExitStatus=143
                TimeoutStopSec=10
                Restart=on-failure
                RestartSec=5
                [Install]
                WantedBy=multi-user.target
          commands:
            01_download_fitnesse:
              command: !Sub |
                sudo -u ec2-user aws s3 sync ${S3Uri} /home/ec2-user/fitnesse
            02_start_fitnesse:
              command: |
                systemctl daemon-reload
                systemctl enable fitnesse.service
                systemctl start fitnesse.service

  Fitnesse:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - !Ref PrivateSubnets
      SecurityGroupIds:
        - !Ref SecurityGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Fitnesse
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref Fitnesse
          Port: 8080
      Matcher:
        HttpCode: 200
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

Outputs:
  HttpTargetGroup:
    Value: !Ref HttpTargetGroup
